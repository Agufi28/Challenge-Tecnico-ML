/@startuml Diagrama de clases UML - Simplificado

abstract class DatabaseMetadataAdapter{
    id: int
    scans: list[ScanResult]

    scanStructure(dataSampleSize=0): ScanResult
    fetchSamples(dataSampleSize: int, structure:list[DatabaseSchema], cursor): None
    def getLastScan(): ScanResult
}
DatabaseMetadataAdapter --> "*" ScanResult

class MySQLDatabaseMetadataAdapter extends DatabaseMetadataAdapter{
    host: str
    port: int
    username: str
    password: str

    mysqlTypesToStandarTypes: dict[str, FieldDataTypes]
    __init__(host, port, username, password)
}

enum FieldDataTypes{
    STRING
    INTEGER
    DECIMAL
    BOOLEAN
    BINARY
    TIME
    DATE
    DATETIME
}

class FieldTag{
    id: str
    field: DatabaseField
    tag: DataTypeTag
    certanty_score: int

    __init__(field: DatabaseField, tag: DataTypeTag, certanty_score: int): FieldTag
}
FieldTag --> DataTypeTag

class DatabaseField{
    id: int
    name: str
    type: FieldDataTypes
    table: DatabaseTable
    tags: list[FieldTag]
    dataSample: list[Any]

    __init__(name: str, type: FieldDataTypes): DatabaseField
    getName(): str
    getOrAddTag(tag: DataTypeTag): FieldTag
    updateTag(tag: DataTypeTag, score: int): None
    run(controls: list[Control]): None
}

DatabaseField --> FieldDataTypes
DatabaseField --> "*" FieldTag

class DatabaseTable{
    id: str
    name: str
    fields: list[DatabaseField]

    __init__(name, fields=None): DatabaseTable
    addField(field: DatabaseField): None
    getName(): str
    getFields(): list[DatabaseField]
    run(controls: list[Control]): None
}
DatabaseTable --> "*" DatabaseField

class DatabaseSchema{
    id: int
    name: str
    tables: list[DatabaseTable]

    __init__(name, tables=None): DatabaseSchema
    getName(): str
    addTable(table: DatabaseTable): None
    getTables(): list[DatabaseTable]
    getOrAddTable(name: str): DatabaseTable
    run(controls: list[Control]): None
}
DatabaseSchema --> "*" DatabaseTable

class ScanResult{
    id: int
    name: str
    executeOn: datetime
    schemas: list[DatabaseSchema]
    database: DatabaseMetadataAdapter

    __init__(database: DatabaseMetadataAdapter): ScanResult
    run(controls: list[Control]): None
}
ScanResult --> "*" DatabaseSchema

class DataTypeTag{
    id: id
    name: str
    description: Optional[str]

    __init__(name: str, description: str=None): DataTypeTag
}


class ControlAffectedTag{
    id: int
    control: Control
    tag: DataTypeTag

    __init__(control: Control, tag: DataTypeTag, affectedScoreBy: int): ControlTag
}
ControlAffectedTag --> DataTypeTag

abstract class Control{
    id: int
    name: str
    raw_data: str
    affectedTags: list[ControlAffectedTag]

    __init__(name: str, affectedTags: dict[DataTypeTag, int])
    __conditionMatches(field: DatabaseField): bool
    getData(): dict[str, Any]
    executeOn(field: DatabaseField): None
}
Control --> "*" ControlAffectedTag

class RegExOnFieldNameControl extends Control{
    __init__(name: str, affectedTags: dict[DataTypeTag, int], regex :str): RegExOnFieldNameControl
    getRegEx(): str
}

/@enduml